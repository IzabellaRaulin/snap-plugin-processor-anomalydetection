/*
http://www.apache.org/licenses/LICENSE-2.0.txt


Copyright 2016 Intel Corporation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go.
// source: github.com/intelsdi-x/snap/control/plugin/rpc/plugin.proto
// DO NOT EDIT!

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	github.com/intelsdi-x/snap/control/plugin/rpc/plugin.proto

It has these top-level messages:
	ProcessArg
	ProcessReply
	PublishArg
	Rule
	SetKeyArg
	SetKeyReply
	PingReply
	KillRequest
	KillReply
	GetConfigPolicyReply
	BoolRule
	BoolPolicy
	FloatRule
	FloatPolicy
	IntegerRule
	IntegerPolicy
	StringRule
	StringPolicy
	CollectMetricsArg
	CollectMetricsReply
	GetMetricTypesArg
	GetMetricTypesReply
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/intelsdi-x/snap/grpc/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProcessArg struct {
	ContentType string            `protobuf:"bytes,1,opt,name=ContentType" json:"ContentType,omitempty"`
	Content     []byte            `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Config      *common.ConfigMap `protobuf:"bytes,3,opt,name=Config" json:"Config,omitempty"`
}

func (m *ProcessArg) Reset()                    { *m = ProcessArg{} }
func (m *ProcessArg) String() string            { return proto.CompactTextString(m) }
func (*ProcessArg) ProtoMessage()               {}
func (*ProcessArg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ProcessArg) GetConfig() *common.ConfigMap {
	if m != nil {
		return m.Config
	}
	return nil
}

type ProcessReply struct {
	ContentType string `protobuf:"bytes,1,opt,name=ContentType" json:"ContentType,omitempty"`
	Content     []byte `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Error       string `protobuf:"bytes,3,opt,name=Error" json:"Error,omitempty"`
}

func (m *ProcessReply) Reset()                    { *m = ProcessReply{} }
func (m *ProcessReply) String() string            { return proto.CompactTextString(m) }
func (*ProcessReply) ProtoMessage()               {}
func (*ProcessReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type PublishArg struct {
	ContentType string            `protobuf:"bytes,1,opt,name=ContentType" json:"ContentType,omitempty"`
	Content     []byte            `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Config      *common.ConfigMap `protobuf:"bytes,3,opt,name=Config" json:"Config,omitempty"`
}

func (m *PublishArg) Reset()                    { *m = PublishArg{} }
func (m *PublishArg) String() string            { return proto.CompactTextString(m) }
func (*PublishArg) ProtoMessage()               {}
func (*PublishArg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PublishArg) GetConfig() *common.ConfigMap {
	if m != nil {
		return m.Config
	}
	return nil
}

type Rule struct {
	RuleType      string  `protobuf:"bytes,1,opt,name=rule_type" json:"rule_type,omitempty"`
	Key           string  `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Required      bool    `protobuf:"varint,3,opt,name=required" json:"required,omitempty"`
	Eescription   string  `protobuf:"bytes,4,opt,name=eescription" json:"eescription,omitempty"`
	BoolDefault   bool    `protobuf:"varint,5,opt,name=bool_default" json:"bool_default,omitempty"`
	FloatDefault  float64 `protobuf:"fixed64,6,opt,name=float_default" json:"float_default,omitempty"`
	FloatMinimum  float64 `protobuf:"fixed64,7,opt,name=float_minimum" json:"float_minimum,omitempty"`
	FloatMaximum  float64 `protobuf:"fixed64,8,opt,name=float_maximum" json:"float_maximum,omitempty"`
	IntDefault    int64   `protobuf:"varint,9,opt,name=int_default" json:"int_default,omitempty"`
	IntMinimum    int64   `protobuf:"varint,10,opt,name=int_minimum" json:"int_minimum,omitempty"`
	IntMaximum    int64   `protobuf:"varint,11,opt,name=int_maximum" json:"int_maximum,omitempty"`
	StringDefault string  `protobuf:"bytes,12,opt,name=string_default" json:"string_default,omitempty"`
}

func (m *Rule) Reset()                    { *m = Rule{} }
func (m *Rule) String() string            { return proto.CompactTextString(m) }
func (*Rule) ProtoMessage()               {}
func (*Rule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type SetKeyArg struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *SetKeyArg) Reset()                    { *m = SetKeyArg{} }
func (m *SetKeyArg) String() string            { return proto.CompactTextString(m) }
func (*SetKeyArg) ProtoMessage()               {}
func (*SetKeyArg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type SetKeyReply struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *SetKeyReply) Reset()                    { *m = SetKeyReply{} }
func (m *SetKeyReply) String() string            { return proto.CompactTextString(m) }
func (*SetKeyReply) ProtoMessage()               {}
func (*SetKeyReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type PingReply struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *PingReply) Reset()                    { *m = PingReply{} }
func (m *PingReply) String() string            { return proto.CompactTextString(m) }
func (*PingReply) ProtoMessage()               {}
func (*PingReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type KillRequest struct {
	Reason string `protobuf:"bytes,1,opt,name=Reason" json:"Reason,omitempty"`
}

func (m *KillRequest) Reset()                    { *m = KillRequest{} }
func (m *KillRequest) String() string            { return proto.CompactTextString(m) }
func (*KillRequest) ProtoMessage()               {}
func (*KillRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type KillReply struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *KillReply) Reset()                    { *m = KillReply{} }
func (m *KillReply) String() string            { return proto.CompactTextString(m) }
func (*KillReply) ProtoMessage()               {}
func (*KillReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type GetConfigPolicyReply struct {
	Error         string                    `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	BoolPolicy    map[string]*BoolPolicy    `protobuf:"bytes,2,rep,name=bool_policy" json:"bool_policy,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	FloatPolicy   map[string]*FloatPolicy   `protobuf:"bytes,3,rep,name=float_policy" json:"float_policy,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IntegerPolicy map[string]*IntegerPolicy `protobuf:"bytes,4,rep,name=integer_policy" json:"integer_policy,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StringPolicy  map[string]*StringPolicy  `protobuf:"bytes,5,rep,name=string_policy" json:"string_policy,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetConfigPolicyReply) Reset()                    { *m = GetConfigPolicyReply{} }
func (m *GetConfigPolicyReply) String() string            { return proto.CompactTextString(m) }
func (*GetConfigPolicyReply) ProtoMessage()               {}
func (*GetConfigPolicyReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetConfigPolicyReply) GetBoolPolicy() map[string]*BoolPolicy {
	if m != nil {
		return m.BoolPolicy
	}
	return nil
}

func (m *GetConfigPolicyReply) GetFloatPolicy() map[string]*FloatPolicy {
	if m != nil {
		return m.FloatPolicy
	}
	return nil
}

func (m *GetConfigPolicyReply) GetIntegerPolicy() map[string]*IntegerPolicy {
	if m != nil {
		return m.IntegerPolicy
	}
	return nil
}

func (m *GetConfigPolicyReply) GetStringPolicy() map[string]*StringPolicy {
	if m != nil {
		return m.StringPolicy
	}
	return nil
}

type BoolRule struct {
	Required bool `protobuf:"varint,1,opt,name=required" json:"required,omitempty"`
	Default  bool `protobuf:"varint,2,opt,name=default" json:"default,omitempty"`
}

func (m *BoolRule) Reset()                    { *m = BoolRule{} }
func (m *BoolRule) String() string            { return proto.CompactTextString(m) }
func (*BoolRule) ProtoMessage()               {}
func (*BoolRule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type BoolPolicy struct {
	Rules map[string]*BoolRule `protobuf:"bytes,1,rep,name=rules" json:"rules,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *BoolPolicy) Reset()                    { *m = BoolPolicy{} }
func (m *BoolPolicy) String() string            { return proto.CompactTextString(m) }
func (*BoolPolicy) ProtoMessage()               {}
func (*BoolPolicy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *BoolPolicy) GetRules() map[string]*BoolRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type FloatRule struct {
	Required bool    `protobuf:"varint,1,opt,name=required" json:"required,omitempty"`
	Minimum  float64 `protobuf:"fixed64,2,opt,name=minimum" json:"minimum,omitempty"`
	Maximum  float64 `protobuf:"fixed64,3,opt,name=maximum" json:"maximum,omitempty"`
	Default  float64 `protobuf:"fixed64,4,opt,name=default" json:"default,omitempty"`
}

func (m *FloatRule) Reset()                    { *m = FloatRule{} }
func (m *FloatRule) String() string            { return proto.CompactTextString(m) }
func (*FloatRule) ProtoMessage()               {}
func (*FloatRule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type FloatPolicy struct {
	Rules map[string]*FloatRule `protobuf:"bytes,1,rep,name=rules" json:"rules,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *FloatPolicy) Reset()                    { *m = FloatPolicy{} }
func (m *FloatPolicy) String() string            { return proto.CompactTextString(m) }
func (*FloatPolicy) ProtoMessage()               {}
func (*FloatPolicy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *FloatPolicy) GetRules() map[string]*FloatRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type IntegerRule struct {
	Required bool  `protobuf:"varint,1,opt,name=required" json:"required,omitempty"`
	Minimum  int64 `protobuf:"varint,2,opt,name=minimum" json:"minimum,omitempty"`
	Maximum  int64 `protobuf:"varint,3,opt,name=maximum" json:"maximum,omitempty"`
	Default  int64 `protobuf:"varint,4,opt,name=default" json:"default,omitempty"`
}

func (m *IntegerRule) Reset()                    { *m = IntegerRule{} }
func (m *IntegerRule) String() string            { return proto.CompactTextString(m) }
func (*IntegerRule) ProtoMessage()               {}
func (*IntegerRule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type IntegerPolicy struct {
	Rules map[string]*IntegerRule `protobuf:"bytes,1,rep,name=rules" json:"rules,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *IntegerPolicy) Reset()                    { *m = IntegerPolicy{} }
func (m *IntegerPolicy) String() string            { return proto.CompactTextString(m) }
func (*IntegerPolicy) ProtoMessage()               {}
func (*IntegerPolicy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *IntegerPolicy) GetRules() map[string]*IntegerRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type StringRule struct {
	Required bool   `protobuf:"varint,1,opt,name=required" json:"required,omitempty"`
	Default  string `protobuf:"bytes,2,opt,name=default" json:"default,omitempty"`
}

func (m *StringRule) Reset()                    { *m = StringRule{} }
func (m *StringRule) String() string            { return proto.CompactTextString(m) }
func (*StringRule) ProtoMessage()               {}
func (*StringRule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type StringPolicy struct {
	Rules map[string]*StringRule `protobuf:"bytes,1,rep,name=rules" json:"rules,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *StringPolicy) Reset()                    { *m = StringPolicy{} }
func (m *StringPolicy) String() string            { return proto.CompactTextString(m) }
func (*StringPolicy) ProtoMessage()               {}
func (*StringPolicy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *StringPolicy) GetRules() map[string]*StringRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type CollectMetricsArg struct {
	Metrics []*common.Metric `protobuf:"bytes,1,rep,name=metrics" json:"metrics,omitempty"`
}

func (m *CollectMetricsArg) Reset()                    { *m = CollectMetricsArg{} }
func (m *CollectMetricsArg) String() string            { return proto.CompactTextString(m) }
func (*CollectMetricsArg) ProtoMessage()               {}
func (*CollectMetricsArg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *CollectMetricsArg) GetMetrics() []*common.Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type CollectMetricsReply struct {
	Metrics []*common.Metric `protobuf:"bytes,1,rep,name=metrics" json:"metrics,omitempty"`
	Error   string           `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *CollectMetricsReply) Reset()                    { *m = CollectMetricsReply{} }
func (m *CollectMetricsReply) String() string            { return proto.CompactTextString(m) }
func (*CollectMetricsReply) ProtoMessage()               {}
func (*CollectMetricsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *CollectMetricsReply) GetMetrics() []*common.Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type GetMetricTypesArg struct {
	Config *common.ConfigMap `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
}

func (m *GetMetricTypesArg) Reset()                    { *m = GetMetricTypesArg{} }
func (m *GetMetricTypesArg) String() string            { return proto.CompactTextString(m) }
func (*GetMetricTypesArg) ProtoMessage()               {}
func (*GetMetricTypesArg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *GetMetricTypesArg) GetConfig() *common.ConfigMap {
	if m != nil {
		return m.Config
	}
	return nil
}

type GetMetricTypesReply struct {
	Metrics []*common.Metric `protobuf:"bytes,1,rep,name=metrics" json:"metrics,omitempty"`
	Error   string           `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *GetMetricTypesReply) Reset()                    { *m = GetMetricTypesReply{} }
func (m *GetMetricTypesReply) String() string            { return proto.CompactTextString(m) }
func (*GetMetricTypesReply) ProtoMessage()               {}
func (*GetMetricTypesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *GetMetricTypesReply) GetMetrics() []*common.Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func init() {
	proto.RegisterType((*ProcessArg)(nil), "rpc.ProcessArg")
	proto.RegisterType((*ProcessReply)(nil), "rpc.ProcessReply")
	proto.RegisterType((*PublishArg)(nil), "rpc.PublishArg")
	proto.RegisterType((*Rule)(nil), "rpc.Rule")
	proto.RegisterType((*SetKeyArg)(nil), "rpc.SetKeyArg")
	proto.RegisterType((*SetKeyReply)(nil), "rpc.SetKeyReply")
	proto.RegisterType((*PingReply)(nil), "rpc.PingReply")
	proto.RegisterType((*KillRequest)(nil), "rpc.KillRequest")
	proto.RegisterType((*KillReply)(nil), "rpc.KillReply")
	proto.RegisterType((*GetConfigPolicyReply)(nil), "rpc.GetConfigPolicyReply")
	proto.RegisterType((*BoolRule)(nil), "rpc.BoolRule")
	proto.RegisterType((*BoolPolicy)(nil), "rpc.BoolPolicy")
	proto.RegisterType((*FloatRule)(nil), "rpc.FloatRule")
	proto.RegisterType((*FloatPolicy)(nil), "rpc.FloatPolicy")
	proto.RegisterType((*IntegerRule)(nil), "rpc.IntegerRule")
	proto.RegisterType((*IntegerPolicy)(nil), "rpc.IntegerPolicy")
	proto.RegisterType((*StringRule)(nil), "rpc.StringRule")
	proto.RegisterType((*StringPolicy)(nil), "rpc.StringPolicy")
	proto.RegisterType((*CollectMetricsArg)(nil), "rpc.CollectMetricsArg")
	proto.RegisterType((*CollectMetricsReply)(nil), "rpc.CollectMetricsReply")
	proto.RegisterType((*GetMetricTypesArg)(nil), "rpc.GetMetricTypesArg")
	proto.RegisterType((*GetMetricTypesReply)(nil), "rpc.GetMetricTypesReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Collector service

type CollectorClient interface {
	CollectMetrics(ctx context.Context, in *CollectMetricsArg, opts ...grpc.CallOption) (*CollectMetricsReply, error)
	GetMetricTypes(ctx context.Context, in *GetMetricTypesArg, opts ...grpc.CallOption) (*GetMetricTypesReply, error)
	SetKey(ctx context.Context, in *SetKeyArg, opts ...grpc.CallOption) (*SetKeyReply, error)
	Ping(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*PingReply, error)
	Kill(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*KillReply, error)
	GetConfigPolicy(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetConfigPolicyReply, error)
}

type collectorClient struct {
	cc *grpc.ClientConn
}

func NewCollectorClient(cc *grpc.ClientConn) CollectorClient {
	return &collectorClient{cc}
}

func (c *collectorClient) CollectMetrics(ctx context.Context, in *CollectMetricsArg, opts ...grpc.CallOption) (*CollectMetricsReply, error) {
	out := new(CollectMetricsReply)
	err := grpc.Invoke(ctx, "/rpc.Collector/CollectMetrics", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorClient) GetMetricTypes(ctx context.Context, in *GetMetricTypesArg, opts ...grpc.CallOption) (*GetMetricTypesReply, error) {
	out := new(GetMetricTypesReply)
	err := grpc.Invoke(ctx, "/rpc.Collector/GetMetricTypes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorClient) SetKey(ctx context.Context, in *SetKeyArg, opts ...grpc.CallOption) (*SetKeyReply, error) {
	out := new(SetKeyReply)
	err := grpc.Invoke(ctx, "/rpc.Collector/SetKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorClient) Ping(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := grpc.Invoke(ctx, "/rpc.Collector/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorClient) Kill(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*KillReply, error) {
	out := new(KillReply)
	err := grpc.Invoke(ctx, "/rpc.Collector/Kill", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorClient) GetConfigPolicy(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetConfigPolicyReply, error) {
	out := new(GetConfigPolicyReply)
	err := grpc.Invoke(ctx, "/rpc.Collector/GetConfigPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Collector service

type CollectorServer interface {
	CollectMetrics(context.Context, *CollectMetricsArg) (*CollectMetricsReply, error)
	GetMetricTypes(context.Context, *GetMetricTypesArg) (*GetMetricTypesReply, error)
	SetKey(context.Context, *SetKeyArg) (*SetKeyReply, error)
	Ping(context.Context, *common.Empty) (*PingReply, error)
	Kill(context.Context, *KillRequest) (*KillReply, error)
	GetConfigPolicy(context.Context, *common.Empty) (*GetConfigPolicyReply, error)
}

func RegisterCollectorServer(s *grpc.Server, srv CollectorServer) {
	s.RegisterService(&_Collector_serviceDesc, srv)
}

func _Collector_CollectMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectMetricsArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServer).CollectMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Collector/CollectMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServer).CollectMetrics(ctx, req.(*CollectMetricsArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collector_GetMetricTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricTypesArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServer).GetMetricTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Collector/GetMetricTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServer).GetMetricTypes(ctx, req.(*GetMetricTypesArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collector_SetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetKeyArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServer).SetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Collector/SetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServer).SetKey(ctx, req.(*SetKeyArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collector_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Collector/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServer).Ping(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collector_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Collector/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServer).Kill(ctx, req.(*KillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collector_GetConfigPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServer).GetConfigPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Collector/GetConfigPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServer).GetConfigPolicy(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Collector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Collector",
	HandlerType: (*CollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CollectMetrics",
			Handler:    _Collector_CollectMetrics_Handler,
		},
		{
			MethodName: "GetMetricTypes",
			Handler:    _Collector_GetMetricTypes_Handler,
		},
		{
			MethodName: "SetKey",
			Handler:    _Collector_SetKey_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Collector_Ping_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _Collector_Kill_Handler,
		},
		{
			MethodName: "GetConfigPolicy",
			Handler:    _Collector_GetConfigPolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for Processor service

type ProcessorClient interface {
	Process(ctx context.Context, in *ProcessArg, opts ...grpc.CallOption) (*ProcessReply, error)
	SetKey(ctx context.Context, in *SetKeyArg, opts ...grpc.CallOption) (*SetKeyReply, error)
	Ping(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*PingReply, error)
	Kill(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*KillReply, error)
	GetConfigPolicy(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetConfigPolicyReply, error)
}

type processorClient struct {
	cc *grpc.ClientConn
}

func NewProcessorClient(cc *grpc.ClientConn) ProcessorClient {
	return &processorClient{cc}
}

func (c *processorClient) Process(ctx context.Context, in *ProcessArg, opts ...grpc.CallOption) (*ProcessReply, error) {
	out := new(ProcessReply)
	err := grpc.Invoke(ctx, "/rpc.Processor/Process", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorClient) SetKey(ctx context.Context, in *SetKeyArg, opts ...grpc.CallOption) (*SetKeyReply, error) {
	out := new(SetKeyReply)
	err := grpc.Invoke(ctx, "/rpc.Processor/SetKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorClient) Ping(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := grpc.Invoke(ctx, "/rpc.Processor/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorClient) Kill(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*KillReply, error) {
	out := new(KillReply)
	err := grpc.Invoke(ctx, "/rpc.Processor/Kill", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorClient) GetConfigPolicy(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetConfigPolicyReply, error) {
	out := new(GetConfigPolicyReply)
	err := grpc.Invoke(ctx, "/rpc.Processor/GetConfigPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Processor service

type ProcessorServer interface {
	Process(context.Context, *ProcessArg) (*ProcessReply, error)
	SetKey(context.Context, *SetKeyArg) (*SetKeyReply, error)
	Ping(context.Context, *common.Empty) (*PingReply, error)
	Kill(context.Context, *KillRequest) (*KillReply, error)
	GetConfigPolicy(context.Context, *common.Empty) (*GetConfigPolicyReply, error)
}

func RegisterProcessorServer(s *grpc.Server, srv ProcessorServer) {
	s.RegisterService(&_Processor_serviceDesc, srv)
}

func _Processor_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Processor/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorServer).Process(ctx, req.(*ProcessArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Processor_SetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetKeyArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorServer).SetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Processor/SetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorServer).SetKey(ctx, req.(*SetKeyArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Processor_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Processor/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorServer).Ping(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Processor_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Processor/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorServer).Kill(ctx, req.(*KillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Processor_GetConfigPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorServer).GetConfigPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Processor/GetConfigPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorServer).GetConfigPolicy(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Processor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Processor",
	HandlerType: (*ProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _Processor_Process_Handler,
		},
		{
			MethodName: "SetKey",
			Handler:    _Processor_SetKey_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Processor_Ping_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _Processor_Kill_Handler,
		},
		{
			MethodName: "GetConfigPolicy",
			Handler:    _Processor_GetConfigPolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for Publisher service

type PublisherClient interface {
	Publish(ctx context.Context, in *PublishArg, opts ...grpc.CallOption) (*common.Empty, error)
	SetKey(ctx context.Context, in *SetKeyArg, opts ...grpc.CallOption) (*SetKeyReply, error)
	Ping(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*PingReply, error)
	Kill(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*KillReply, error)
	GetConfigPolicy(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetConfigPolicyReply, error)
}

type publisherClient struct {
	cc *grpc.ClientConn
}

func NewPublisherClient(cc *grpc.ClientConn) PublisherClient {
	return &publisherClient{cc}
}

func (c *publisherClient) Publish(ctx context.Context, in *PublishArg, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/rpc.Publisher/Publish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherClient) SetKey(ctx context.Context, in *SetKeyArg, opts ...grpc.CallOption) (*SetKeyReply, error) {
	out := new(SetKeyReply)
	err := grpc.Invoke(ctx, "/rpc.Publisher/SetKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherClient) Ping(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := grpc.Invoke(ctx, "/rpc.Publisher/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherClient) Kill(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*KillReply, error) {
	out := new(KillReply)
	err := grpc.Invoke(ctx, "/rpc.Publisher/Kill", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherClient) GetConfigPolicy(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetConfigPolicyReply, error) {
	out := new(GetConfigPolicyReply)
	err := grpc.Invoke(ctx, "/rpc.Publisher/GetConfigPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Publisher service

type PublisherServer interface {
	Publish(context.Context, *PublishArg) (*common.Empty, error)
	SetKey(context.Context, *SetKeyArg) (*SetKeyReply, error)
	Ping(context.Context, *common.Empty) (*PingReply, error)
	Kill(context.Context, *KillRequest) (*KillReply, error)
	GetConfigPolicy(context.Context, *common.Empty) (*GetConfigPolicyReply, error)
}

func RegisterPublisherServer(s *grpc.Server, srv PublisherServer) {
	s.RegisterService(&_Publisher_serviceDesc, srv)
}

func _Publisher_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Publisher/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServer).Publish(ctx, req.(*PublishArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Publisher_SetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetKeyArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServer).SetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Publisher/SetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServer).SetKey(ctx, req.(*SetKeyArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Publisher_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Publisher/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServer).Ping(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Publisher_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Publisher/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServer).Kill(ctx, req.(*KillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Publisher_GetConfigPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServer).GetConfigPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Publisher/GetConfigPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServer).GetConfigPolicy(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Publisher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Publisher",
	HandlerType: (*PublisherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _Publisher_Publish_Handler,
		},
		{
			MethodName: "SetKey",
			Handler:    _Publisher_SetKey_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Publisher_Ping_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _Publisher_Kill_Handler,
		},
		{
			MethodName: "GetConfigPolicy",
			Handler:    _Publisher_GetConfigPolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func init() {
	proto.RegisterFile("github.com/intelsdi-x/snap/control/plugin/rpc/plugin.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 986 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xdc, 0x97, 0xdf, 0x73, 0xdb, 0x44,
	0x10, 0xc7, 0xab, 0xc8, 0x76, 0xac, 0x95, 0xed, 0xc4, 0xd7, 0xd2, 0x31, 0x22, 0xa1, 0xad, 0x5e,
	0xa0, 0x69, 0x6a, 0xcf, 0xa4, 0x0c, 0xc3, 0x14, 0xda, 0x81, 0xa4, 0x29, 0x30, 0x9d, 0xce, 0x64,
	0x5c, 0x78, 0xee, 0xd8, 0xca, 0xc5, 0xd5, 0x20, 0x4b, 0x42, 0x92, 0xa1, 0x66, 0x86, 0x3f, 0x91,
	0x3f, 0x80, 0x7f, 0x85, 0x07, 0x60, 0x6f, 0xef, 0xf4, 0xe3, 0x6c, 0x09, 0x32, 0x0c, 0x4f, 0x7d,
	0x72, 0x6e, 0xb5, 0xfb, 0xd1, 0x7e, 0x77, 0xef, 0x6e, 0x15, 0x78, 0xbc, 0xf0, 0xb3, 0x37, 0xab,
	0xf9, 0xd8, 0x8b, 0x96, 0x13, 0x3f, 0xcc, 0x78, 0x90, 0x5e, 0xfa, 0x0f, 0xdf, 0x4e, 0xd2, 0x70,
	0x16, 0x4f, 0xbc, 0x28, 0xcc, 0x92, 0x28, 0x98, 0xc4, 0xc1, 0x6a, 0xe1, 0x87, 0x93, 0x24, 0xf6,
	0xd4, 0x9f, 0xe3, 0x38, 0x89, 0xb2, 0x88, 0x99, 0x68, 0x71, 0x1e, 0xfd, 0x03, 0x60, 0x21, 0x42,
	0xf0, 0xc1, 0x32, 0x0a, 0xd5, 0x8f, 0x8c, 0x74, 0xbf, 0x07, 0xb8, 0x48, 0x22, 0x8f, 0xa7, 0xe9,
	0x57, 0xc9, 0x82, 0xdd, 0x04, 0xfb, 0x0c, 0x5f, 0xc5, 0xc3, 0xec, 0xbb, 0x75, 0xcc, 0x47, 0xc6,
	0x5d, 0xe3, 0x63, 0x8b, 0xed, 0xc1, 0xae, 0x32, 0x8e, 0x76, 0xd0, 0xd0, 0x63, 0xf7, 0xa0, 0x83,
	0x86, 0x2b, 0x7f, 0x31, 0x32, 0x71, 0x6d, 0x9f, 0x0c, 0xc7, 0x0a, 0x29, 0xad, 0x2f, 0x67, 0xb1,
	0x7b, 0x06, 0x3d, 0x85, 0x9d, 0xf2, 0x38, 0x58, 0x5f, 0x13, 0xdc, 0x87, 0xf6, 0x79, 0x92, 0x44,
	0x09, 0x71, 0x2d, 0xca, 0x6d, 0x35, 0x0f, 0xfc, 0xf4, 0xcd, 0xff, 0x9a, 0xdb, 0x5f, 0x06, 0xb4,
	0xa6, 0xab, 0x80, 0xb3, 0x21, 0x58, 0x09, 0xfe, 0xbe, 0xce, 0x4a, 0x9e, 0x0d, 0xe6, 0x0f, 0x7c,
	0x4d, 0x2c, 0x8b, 0xed, 0x43, 0x37, 0xe1, 0x3f, 0xae, 0xfc, 0x84, 0x5f, 0x12, 0xad, 0x2b, 0x72,
	0xe0, 0x3c, 0xf5, 0x12, 0x3f, 0xce, 0xfc, 0x28, 0x1c, 0xb5, 0xc8, 0xed, 0x16, 0xf4, 0xe6, 0x51,
	0x14, 0xbc, 0xbe, 0xe4, 0x57, 0xb3, 0x55, 0x90, 0x8d, 0xda, 0xe4, 0xfa, 0x1e, 0xf4, 0xaf, 0x82,
	0x68, 0x96, 0x15, 0xe6, 0x0e, 0x9a, 0x8d, 0xd2, 0xbc, 0xf4, 0x43, 0x7f, 0xb9, 0x5a, 0x8e, 0x76,
	0x37, 0xcc, 0xb3, 0xb7, 0x64, 0xee, 0x92, 0x19, 0xdf, 0x87, 0x9d, 0x2c, 0x10, 0x16, 0x1a, 0xcd,
	0xdc, 0x98, 0x03, 0x40, 0x33, 0xaa, 0x70, 0x9b, 0x8c, 0xb7, 0x61, 0x90, 0x66, 0x89, 0x1f, 0x2e,
	0x0a, 0x42, 0x8f, 0x0a, 0x3b, 0x02, 0xeb, 0x15, 0xcf, 0x5e, 0xf0, 0xb5, 0xa8, 0xab, 0x92, 0x2c,
	0xf4, 0xf7, 0xdc, 0x03, 0xb0, 0xe5, 0x13, 0xd9, 0x36, 0x6c, 0x08, 0xa7, 0x86, 0x50, 0x75, 0x5c,
	0x07, 0xac, 0x0b, 0xa4, 0xd5, 0x3e, 0x3b, 0x04, 0xfb, 0x85, 0x1f, 0x04, 0x53, 0x2c, 0x18, 0x4f,
	0x33, 0x36, 0x80, 0xce, 0x94, 0xcf, 0x52, 0x2c, 0x52, 0x11, 0x2a, 0x1f, 0xd7, 0x84, 0xfe, 0xd6,
	0x82, 0x5b, 0x5f, 0xf3, 0x4c, 0x76, 0xe8, 0x22, 0x0a, 0x7c, 0xaf, 0xf6, 0xf5, 0xec, 0x29, 0xd8,
	0x54, 0xe8, 0x98, 0x5c, 0xb0, 0x49, 0x26, 0x36, 0xf8, 0xfe, 0x18, 0xb7, 0xf6, 0xb8, 0x2e, 0x7c,
	0x7c, 0x8a, 0xce, 0x72, 0x7d, 0x8e, 0xc7, 0x67, 0xcd, 0xbe, 0x84, 0x9e, 0x2c, 0xb2, 0x02, 0x98,
	0x04, 0x38, 0x6a, 0x06, 0x3c, 0x17, 0xde, 0x55, 0xc2, 0x33, 0x18, 0x88, 0x93, 0xb5, 0xe0, 0x49,
	0xce, 0x68, 0x11, 0xe3, 0xb8, 0x99, 0xf1, 0xad, 0xf4, 0xaf, 0x52, 0x4e, 0xa1, 0xaf, 0xda, 0xa2,
	0x20, 0x6d, 0x82, 0x3c, 0x68, 0x86, 0xbc, 0x22, 0xf7, 0x0a, 0xc3, 0x39, 0x85, 0xbd, 0x4d, 0x79,
	0x95, 0x46, 0x5a, 0xec, 0x43, 0x68, 0xff, 0x34, 0x0b, 0x56, 0x9c, 0xb6, 0xb2, 0x7d, 0xb2, 0x47,
	0xec, 0x32, 0xe2, 0xf1, 0xce, 0x67, 0x86, 0xf3, 0x0c, 0xf6, 0xb7, 0x14, 0x6a, 0x90, 0x3b, 0x3a,
	0x64, 0x9f, 0x20, 0x95, 0x10, 0xa2, 0x7c, 0x03, 0xac, 0x46, 0xa3, 0xc6, 0xb9, 0xa7, 0x73, 0x18,
	0x71, 0xb4, 0x20, 0x22, 0x3d, 0x87, 0xe1, 0x96, 0x50, 0x1d, 0x74, 0x57, 0x07, 0x0d, 0x09, 0x54,
	0x8d, 0x11, 0x1c, 0xf7, 0x21, 0x74, 0x85, 0x52, 0x3a, 0xe3, 0xd5, 0x33, 0x6c, 0xd0, 0xc1, 0xc4,
	0x2b, 0x23, 0x3f, 0x0d, 0x82, 0xd2, 0x75, 0x33, 0x80, 0xb2, 0x30, 0xec, 0x3e, 0xb4, 0xc5, 0xa5,
	0x90, 0xa2, 0xb7, 0x68, 0x8a, 0xb3, 0x51, 0xb8, 0xb1, 0xa0, 0xa6, 0xb2, 0x07, 0x9f, 0x03, 0x94,
	0x2b, 0x3d, 0xd1, 0x03, 0x3d, 0xd1, 0x7e, 0x41, 0x11, 0x01, 0x94, 0xe4, 0x05, 0x58, 0x54, 0xc9,
	0xe6, 0x2c, 0xf3, 0x03, 0xbe, 0x43, 0x57, 0x81, 0x30, 0xa8, 0xc3, 0x6d, 0xe6, 0x86, 0x5c, 0x87,
	0xb8, 0x87, 0x0c, 0xf7, 0x67, 0xb0, 0x2b, 0xbd, 0x61, 0x47, 0xba, 0x90, 0x0f, 0x36, 0x9b, 0x57,
	0x55, 0xf2, 0x45, 0xb3, 0x92, 0x43, 0x5d, 0xc9, 0xa0, 0xc4, 0x14, 0x52, 0xa6, 0x60, 0xab, 0x66,
	0x5e, 0x4f, 0x8c, 0xb9, 0x29, 0xc6, 0xdc, 0x14, 0x63, 0xba, 0xbf, 0x42, 0x5f, 0xdb, 0x20, 0xec,
	0x58, 0x97, 0x73, 0xb8, 0xbd, 0x87, 0xaa, 0x82, 0x9e, 0x36, 0x0b, 0xaa, 0xdd, 0xd4, 0x95, 0xfc,
	0x49, 0xd2, 0x04, 0x40, 0x6e, 0xab, 0xeb, 0x6d, 0x22, 0xcb, 0xfd, 0x05, 0x7a, 0xd5, 0x7d, 0xc8,
	0x1e, 0xe8, 0xe9, 0x1e, 0x6c, 0xed, 0xd4, 0x6a, 0xb6, 0x4f, 0x9a, 0xb3, 0xad, 0x3d, 0xc7, 0x65,
	0x6a, 0x94, 0xec, 0x27, 0x30, 0x3c, 0x8b, 0x82, 0x80, 0x7b, 0xd9, 0x4b, 0x8e, 0x4f, 0x3c, 0x1a,
	0xe5, 0x77, 0xb0, 0xc4, 0x72, 0xa5, 0x52, 0x18, 0xe4, 0x93, 0x50, 0x3a, 0xb9, 0xe7, 0x70, 0x53,
	0x8f, 0x92, 0x77, 0xee, 0xbf, 0xc5, 0x95, 0x97, 0xb2, 0x14, 0xfe, 0x29, 0x0c, 0xf1, 0xca, 0x92,
	0xcf, 0xc4, 0x60, 0xa6, 0x97, 0xe3, 0x14, 0xf6, 0xe4, 0x14, 0x36, 0x9a, 0xa6, 0x30, 0xbe, 0x5e,
	0x8f, 0xfb, 0x4f, 0xaf, 0x3f, 0xf9, 0x7d, 0x07, 0x2c, 0x25, 0x23, 0x4a, 0xc4, 0xfd, 0xac, 0x6b,
	0x62, 0xb7, 0xa9, 0x60, 0x5b, 0xe5, 0x71, 0x46, 0x35, 0x76, 0xca, 0xc0, 0xbd, 0x21, 0x28, 0x7a,
	0x6a, 0x8a, 0xb2, 0xa5, 0x53, 0x51, 0x6a, 0x74, 0x20, 0xe5, 0x18, 0x3a, 0x72, 0x94, 0x32, 0x79,
	0x66, 0x8a, 0x89, 0xeb, 0xec, 0x57, 0xd6, 0xb9, 0xf7, 0x47, 0xd0, 0x12, 0xa3, 0x95, 0xf5, 0x73,
	0xb9, 0xe7, 0xcb, 0x38, 0x5b, 0x3b, 0x32, 0xb4, 0x18, 0xba, 0xe8, 0x78, 0x04, 0x2d, 0x31, 0x48,
	0x99, 0x84, 0x54, 0x46, 0xae, 0xf2, 0x2d, 0xa6, 0x2c, 0xfa, 0x3e, 0x81, 0xbd, 0x8d, 0x71, 0xb2,
	0xc9, 0x7f, 0xbf, 0x71, 0xe6, 0xb8, 0x37, 0x4e, 0xfe, 0x34, 0x70, 0xde, 0xcb, 0xaf, 0x38, 0xac,
	0xed, 0x04, 0x76, 0xd5, 0x82, 0xc9, 0x5d, 0x58, 0x7e, 0x37, 0x3a, 0xc3, 0xaa, 0xe1, 0xdd, 0x29,
	0xc0, 0x1f, 0xa2, 0x00, 0xf2, 0x0b, 0x94, 0x27, 0x78, 0xa4, 0x77, 0xd5, 0x22, 0x2f, 0x40, 0xf1,
	0x71, 0xea, 0xe8, 0xd4, 0x77, 0x41, 0xfc, 0xbc, 0x43, 0xff, 0x20, 0x3c, 0xfa, 0x3b, 0x00, 0x00,
	0xff, 0xff, 0xd7, 0x48, 0xcc, 0xfe, 0x98, 0x0c, 0x00, 0x00,
}
